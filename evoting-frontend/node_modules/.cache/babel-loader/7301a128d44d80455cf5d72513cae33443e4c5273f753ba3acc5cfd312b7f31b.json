{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import Web3 from\"web3\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SERVER_URL=\"\";// ✅ Replace with deployed backend URL\nconst CONTRACT_ADDRESS=\"0xcC9B2454F7bcC009b2696Af9De6D745307aB3A49\";// ✅ Replace with deployed contract\nconst ADMIN_ADDRESS=\"0x0EA217414c1FaC69E4CBf49F3d8277dF69a76b7D\";// ✅ Replace with Admin's MetaMask Address\nfunction App(){const[candidates,setCandidates]=useState([]);const[candidateName,setCandidateName]=useState(\"\");const[walletAddress,setWalletAddress]=useState(\"\");const[selectedCandidate,setSelectedCandidate]=useState(\"\");const[voteMethod,setVoteMethod]=useState(\"\");const[fingerprintCredential,setFingerprintCredential]=useState(null);// ✅ Fetch Candidates from MongoDB\nuseEffect(()=>{axios.get(`${SERVER_URL}/getCandidates`).then(response=>setCandidates(response.data)).catch(error=>console.error(\"Error fetching candidates:\",error));},[]);// ✅ Connect MetaMask\nconst connectMetaMask=async()=>{if(window.ethereum){const web3=new Web3(window.ethereum);try{await window.ethereum.request({method:\"eth_requestAccounts\"});const accounts=await web3.eth.getAccounts();setWalletAddress(accounts[0]);alert(`Connected: ${accounts[0]}`);}catch(error){console.error(\"MetaMask connection failed:\",error);}}else{alert(\"MetaMask is not installed. Please install MetaMask.\");}};// ✅ Register Fingerprint using WebAuthn API\nconst registerFingerprint=async()=>{try{if(!window.PublicKeyCredential){alert(\"WebAuthn is not supported in this browser.\");return;}const publicKey={challenge:new Uint8Array(32),rp:{name:\"E-Voting System\"},user:{id:new Uint8Array(16),name:walletAddress||\"anonymous\",displayName:walletAddress||\"anonymous\"},pubKeyCredParams:[{type:\"public-key\",alg:-7}],authenticatorSelection:{authenticatorAttachment:\"platform\"},timeout:60000,attestation:\"direct\"};const credential=await navigator.credentials.create({publicKey});setFingerprintCredential(credential);await axios.post(`${SERVER_URL}/registerVoterWithFingerprint`,{fingerprintCredential:JSON.stringify(credential),walletAddress});alert(\"Fingerprint registered successfully!\");}catch(error){console.error(\"Error registering fingerprint:\",error);alert(\"Fingerprint registration failed.\");}};// ✅ Authenticate & Vote Using Fingerprint\nconst voteWithFingerprint=async()=>{try{if(!window.PublicKeyCredential){alert(\"WebAuthn is not supported in this browser.\");return;}if(!selectedCandidate){alert(\"Select a candidate first!\");return;}const publicKey={challenge:new Uint8Array(32),allowCredentials:[{id:fingerprintCredential.rawId,type:\"public-key\"}],timeout:60000};const assertion=await navigator.credentials.get({publicKey});await axios.post(`${SERVER_URL}/voteWithFingerprint`,{fingerprintCredential:JSON.stringify(assertion),candidateId:selectedCandidate});alert(\"Vote cast successfully with fingerprint!\");}catch(error){console.error(\"Error voting with fingerprint:\",error);alert(\"Fingerprint authentication failed.\");}};// ✅ Vote Using MetaMask\nconst voteWithMetaMask=async()=>{try{if(!selectedCandidate){alert(\"Select a candidate first!\");return;}if(!walletAddress){alert(\"Connect MetaMask first\");return;}await axios.post(`${SERVER_URL}/voteWithMetaMask`,{walletAddress,candidateId:selectedCandidate});alert(\"Vote cast successfully using MetaMask!\");}catch(error){console.error(\"Error voting with MetaMask:\",error);alert(\"Voting failed.\");}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"E-Voting System\"}),/*#__PURE__*/_jsx(\"button\",{onClick:connectMetaMask,children:\"Connect MetaMask\"}),(walletAddress===null||walletAddress===void 0?void 0:walletAddress.toLowerCase())===ADMIN_ADDRESS.toLowerCase()&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Admin Panel\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:candidateName,onChange:e=>setCandidateName(e.target.value),placeholder:\"Candidate Name\"}),/*#__PURE__*/_jsx(\"button\",{onClick:async()=>{try{await axios.post(`${SERVER_URL}/addCandidate`,{name:candidateName,walletAddress});alert(\"Candidate added successfully!\");setCandidateName(\"\");fetchCandidates();}catch(error){console.error(\"Error adding candidate:\",error);}},children:\"Add Candidate\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Voter Registration\"}),/*#__PURE__*/_jsx(\"button\",{onClick:registerFingerprint,children:\"Register Fingerprint\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Vote\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Select Voting Method:\"}),/*#__PURE__*/_jsxs(\"select\",{value:voteMethod,onChange:e=>setVoteMethod(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Choose\"}),/*#__PURE__*/_jsx(\"option\",{value:\"fingerprint\",children:\"Fingerprint\"}),/*#__PURE__*/_jsx(\"option\",{value:\"metamask\",children:\"MetaMask\"})]}),/*#__PURE__*/_jsxs(\"select\",{onChange:e=>setSelectedCandidate(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Candidate\"}),candidates.map(candidate=>/*#__PURE__*/_jsxs(\"option\",{value:candidate._id,children:[candidate.name,\" - Votes: \",candidate.voteCount]},candidate._id))]}),/*#__PURE__*/_jsx(\"p\",{children:\"No candidates available.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:voteMethod===\"fingerprint\"?voteWithFingerprint:voteWithMetaMask,disabled:!selectedCandidate||!voteMethod,children:\"Vote\"})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","jsx","_jsx","jsxs","_jsxs","SERVER_URL","CONTRACT_ADDRESS","ADMIN_ADDRESS","App","candidates","setCandidates","candidateName","setCandidateName","walletAddress","setWalletAddress","selectedCandidate","setSelectedCandidate","voteMethod","setVoteMethod","fingerprintCredential","setFingerprintCredential","get","then","response","data","catch","error","console","connectMetaMask","window","ethereum","web3","request","method","accounts","eth","getAccounts","alert","registerFingerprint","PublicKeyCredential","publicKey","challenge","Uint8Array","rp","name","user","id","displayName","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","timeout","attestation","credential","navigator","credentials","create","post","JSON","stringify","voteWithFingerprint","allowCredentials","rawId","assertion","candidateId","voteWithMetaMask","children","onClick","toLowerCase","value","onChange","e","target","placeholder","fetchCandidates","map","candidate","_id","voteCount","disabled"],"sources":["C:/Users/Ajaykumar Kavassery/contracts/evoting-project/evoting-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Web3 from \"web3\";\n\nconst SERVER_URL = \"\"; // ✅ Replace with deployed backend URL\nconst CONTRACT_ADDRESS = \"0xcC9B2454F7bcC009b2696Af9De6D745307aB3A49\"; // ✅ Replace with deployed contract\nconst ADMIN_ADDRESS = \"0x0EA217414c1FaC69E4CBf49F3d8277dF69a76b7D\"; // ✅ Replace with Admin's MetaMask Address\n\nfunction App() {\n    const [candidates, setCandidates] = useState([]);\n    const [candidateName, setCandidateName] = useState(\"\");\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [selectedCandidate, setSelectedCandidate] = useState(\"\");\n    const [voteMethod, setVoteMethod] = useState(\"\");\n    const [fingerprintCredential, setFingerprintCredential] = useState(null);\n\n\n    // ✅ Fetch Candidates from MongoDB\n    useEffect(() => {\n        axios.get(`${SERVER_URL}/getCandidates`)\n            .then((response) => setCandidates(response.data))\n            .catch((error) => console.error(\"Error fetching candidates:\", error));\n    }, []);\n\n    // ✅ Connect MetaMask\n    const connectMetaMask = async () => {\n        if (window.ethereum) {\n            const web3 = new Web3(window.ethereum);\n            try {\n                await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                const accounts = await web3.eth.getAccounts();\n                setWalletAddress(accounts[0]);\n                alert(`Connected: ${accounts[0]}`);\n            } catch (error) {\n                console.error(\"MetaMask connection failed:\", error);\n            }\n        } else {\n            alert(\"MetaMask is not installed. Please install MetaMask.\");\n        }\n    };\n\n    // ✅ Register Fingerprint using WebAuthn API\n    const registerFingerprint = async () => {\n        try {\n            if (!window.PublicKeyCredential) {\n                alert(\"WebAuthn is not supported in this browser.\");\n                return;\n            }\n\n            const publicKey = {\n                challenge: new Uint8Array(32),\n                rp: { name: \"E-Voting System\" },\n                user: {\n                    id: new Uint8Array(16),\n                    name: walletAddress || \"anonymous\",\n                    displayName: walletAddress || \"anonymous\",\n                },\n                pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n                authenticatorSelection: { authenticatorAttachment: \"platform\" },\n                timeout: 60000,\n                attestation: \"direct\",\n            };\n\n            const credential = await navigator.credentials.create({ publicKey });\n            setFingerprintCredential(credential);\n\n            await axios.post(`${SERVER_URL}/registerVoterWithFingerprint`, {\n                fingerprintCredential: JSON.stringify(credential),\n                walletAddress\n            });\n\n            alert(\"Fingerprint registered successfully!\");\n        } catch (error) {\n            console.error(\"Error registering fingerprint:\", error);\n            alert(\"Fingerprint registration failed.\");\n        }\n    };\n\n    // ✅ Authenticate & Vote Using Fingerprint\n    const voteWithFingerprint = async () => {\n        try {\n            if (!window.PublicKeyCredential) {\n                alert(\"WebAuthn is not supported in this browser.\");\n                return;\n            }\n\n            if (!selectedCandidate) {\n                alert(\"Select a candidate first!\");\n                return;\n            }\n\n            const publicKey = {\n                challenge: new Uint8Array(32),\n                allowCredentials: [{ id: fingerprintCredential.rawId, type: \"public-key\" }],\n                timeout: 60000,\n            };\n\n            const assertion = await navigator.credentials.get({ publicKey });\n\n            await axios.post(`${SERVER_URL}/voteWithFingerprint`, {\n                fingerprintCredential: JSON.stringify(assertion),\n                candidateId: selectedCandidate\n            });\n\n            alert(\"Vote cast successfully with fingerprint!\");\n        } catch (error) {\n            console.error(\"Error voting with fingerprint:\", error);\n            alert(\"Fingerprint authentication failed.\");\n        }\n    };\n\n    // ✅ Vote Using MetaMask\n    const voteWithMetaMask = async () => {\n        try {\n            if (!selectedCandidate) {\n                alert(\"Select a candidate first!\");\n                return;\n            }\n\n            if (!walletAddress) {\n                alert(\"Connect MetaMask first\");\n                return;\n            }\n\n            await axios.post(`${SERVER_URL}/voteWithMetaMask`, { walletAddress, candidateId: selectedCandidate });\n            alert(\"Vote cast successfully using MetaMask!\");\n        } catch (error) {\n            console.error(\"Error voting with MetaMask:\", error);\n            alert(\"Voting failed.\");\n        }\n    };\n\n    return (\n        <div>\n            <h1>E-Voting System</h1>\n            <button onClick={connectMetaMask}>Connect MetaMask</button>\n\n            {/* ✅ Admin Panel (Only for Admin) */}\n            {walletAddress?.toLowerCase() === ADMIN_ADDRESS.toLowerCase() && (\n                <div>\n                    <h2>Admin Panel</h2>\n                    <input type=\"text\" value={candidateName} onChange={(e) => setCandidateName(e.target.value)} placeholder=\"Candidate Name\" />\n                    <button onClick={async () => {\n                        try {\n                            await axios.post(`${SERVER_URL}/addCandidate`, { name: candidateName, walletAddress });\n                            alert(\"Candidate added successfully!\");\n                            setCandidateName(\"\");\n                            fetchCandidates();\n                        } catch (error) {\n                            console.error(\"Error adding candidate:\", error);\n                        }\n                    }}>Add Candidate</button>\n                </div>\n            )}\n\n            {/* ✅ Voter Registration */}\n            <div>\n                <h2>Voter Registration</h2>\n                <button onClick={registerFingerprint}>Register Fingerprint</button>\n            </div>\n\n            {/* ✅ Voting Section */}\n            <div>\n                <h2>Vote</h2>\n                <label>Select Voting Method:</label>\n                <select value={voteMethod} onChange={(e) => setVoteMethod(e.target.value)}>\n                    <option value=\"\">Choose</option>\n                    <option value=\"fingerprint\">Fingerprint</option>\n                    <option value=\"metamask\">MetaMask</option>\n                </select>\n\n                {/* ✅ Display Candidates */}\n                <select onChange={(e) => setSelectedCandidate(e.target.value)}>\n    <option value=\"\">Select Candidate</option>\n    {candidates.map((candidate) => (\n        <option key={candidate._id} value={candidate._id}>\n            {candidate.name} - Votes: {candidate.voteCount}\n        </option>\n    ))}\n</select>\n                    <p>No candidates available.</p>\n                \n\n                {/* ✅ Vote Buttons */}\n                <button onClick={voteMethod === \"fingerprint\" ? voteWithFingerprint : voteWithMetaMask} disabled={!selectedCandidate || !voteMethod}>\n                    Vote\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,IAAI,KAAM,MAAM,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExB,KAAM,CAAAC,UAAU,CAAG,EAAE,CAAE;AACvB,KAAM,CAAAC,gBAAgB,CAAG,4CAA4C,CAAE;AACvE,KAAM,CAAAC,aAAa,CAAG,4CAA4C,CAAE;AAEpE,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACc,aAAa,CAAEC,gBAAgB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACgB,aAAa,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACkB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC9D,KAAM,CAACoB,UAAU,CAAEC,aAAa,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACsB,qBAAqB,CAAEC,wBAAwB,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CAGxE;AACAC,SAAS,CAAC,IAAM,CACZC,KAAK,CAACsB,GAAG,CAAC,GAAGhB,UAAU,gBAAgB,CAAC,CACnCiB,IAAI,CAAEC,QAAQ,EAAKb,aAAa,CAACa,QAAQ,CAACC,IAAI,CAAC,CAAC,CAChDC,KAAK,CAAEC,KAAK,EAAKC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAAC,CAC7E,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAE,eAAe,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAIC,MAAM,CAACC,QAAQ,CAAE,CACjB,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAA/B,IAAI,CAAC6B,MAAM,CAACC,QAAQ,CAAC,CACtC,GAAI,CACA,KAAM,CAAAD,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC,CAAEC,MAAM,CAAE,qBAAsB,CAAC,CAAC,CAChE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,IAAI,CAACI,GAAG,CAACC,WAAW,CAAC,CAAC,CAC7CtB,gBAAgB,CAACoB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC7BG,KAAK,CAAC,cAAcH,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CACtC,CAAE,MAAOR,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACvD,CACJ,CAAC,IAAM,CACHW,KAAK,CAAC,qDAAqD,CAAC,CAChE,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACA,GAAI,CAACT,MAAM,CAACU,mBAAmB,CAAE,CAC7BF,KAAK,CAAC,4CAA4C,CAAC,CACnD,OACJ,CAEA,KAAM,CAAAG,SAAS,CAAG,CACdC,SAAS,CAAE,GAAI,CAAAC,UAAU,CAAC,EAAE,CAAC,CAC7BC,EAAE,CAAE,CAAEC,IAAI,CAAE,iBAAkB,CAAC,CAC/BC,IAAI,CAAE,CACFC,EAAE,CAAE,GAAI,CAAAJ,UAAU,CAAC,EAAE,CAAC,CACtBE,IAAI,CAAE/B,aAAa,EAAI,WAAW,CAClCkC,WAAW,CAAElC,aAAa,EAAI,WAClC,CAAC,CACDmC,gBAAgB,CAAE,CAAC,CAAEC,IAAI,CAAE,YAAY,CAAEC,GAAG,CAAE,CAAC,CAAE,CAAC,CAAC,CACnDC,sBAAsB,CAAE,CAAEC,uBAAuB,CAAE,UAAW,CAAC,CAC/DC,OAAO,CAAE,KAAK,CACdC,WAAW,CAAE,QACjB,CAAC,CAED,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAC,SAAS,CAACC,WAAW,CAACC,MAAM,CAAC,CAAElB,SAAU,CAAC,CAAC,CACpEpB,wBAAwB,CAACmC,UAAU,CAAC,CAEpC,KAAM,CAAAxD,KAAK,CAAC4D,IAAI,CAAC,GAAGtD,UAAU,+BAA+B,CAAE,CAC3Dc,qBAAqB,CAAEyC,IAAI,CAACC,SAAS,CAACN,UAAU,CAAC,CACjD1C,aACJ,CAAC,CAAC,CAEFwB,KAAK,CAAC,sCAAsC,CAAC,CACjD,CAAE,MAAOX,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDW,KAAK,CAAC,kCAAkC,CAAC,CAC7C,CACJ,CAAC,CAED;AACA,KAAM,CAAAyB,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACA,GAAI,CAACjC,MAAM,CAACU,mBAAmB,CAAE,CAC7BF,KAAK,CAAC,4CAA4C,CAAC,CACnD,OACJ,CAEA,GAAI,CAACtB,iBAAiB,CAAE,CACpBsB,KAAK,CAAC,2BAA2B,CAAC,CAClC,OACJ,CAEA,KAAM,CAAAG,SAAS,CAAG,CACdC,SAAS,CAAE,GAAI,CAAAC,UAAU,CAAC,EAAE,CAAC,CAC7BqB,gBAAgB,CAAE,CAAC,CAAEjB,EAAE,CAAE3B,qBAAqB,CAAC6C,KAAK,CAAEf,IAAI,CAAE,YAAa,CAAC,CAAC,CAC3EI,OAAO,CAAE,KACb,CAAC,CAED,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAT,SAAS,CAACC,WAAW,CAACpC,GAAG,CAAC,CAAEmB,SAAU,CAAC,CAAC,CAEhE,KAAM,CAAAzC,KAAK,CAAC4D,IAAI,CAAC,GAAGtD,UAAU,sBAAsB,CAAE,CAClDc,qBAAqB,CAAEyC,IAAI,CAACC,SAAS,CAACI,SAAS,CAAC,CAChDC,WAAW,CAAEnD,iBACjB,CAAC,CAAC,CAEFsB,KAAK,CAAC,0CAA0C,CAAC,CACrD,CAAE,MAAOX,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDW,KAAK,CAAC,oCAAoC,CAAC,CAC/C,CACJ,CAAC,CAED;AACA,KAAM,CAAA8B,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACA,GAAI,CAACpD,iBAAiB,CAAE,CACpBsB,KAAK,CAAC,2BAA2B,CAAC,CAClC,OACJ,CAEA,GAAI,CAACxB,aAAa,CAAE,CAChBwB,KAAK,CAAC,wBAAwB,CAAC,CAC/B,OACJ,CAEA,KAAM,CAAAtC,KAAK,CAAC4D,IAAI,CAAC,GAAGtD,UAAU,mBAAmB,CAAE,CAAEQ,aAAa,CAAEqD,WAAW,CAAEnD,iBAAkB,CAAC,CAAC,CACrGsB,KAAK,CAAC,wCAAwC,CAAC,CACnD,CAAE,MAAOX,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnDW,KAAK,CAAC,gBAAgB,CAAC,CAC3B,CACJ,CAAC,CAED,mBACIjC,KAAA,QAAAgE,QAAA,eACIlE,IAAA,OAAAkE,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBlE,IAAA,WAAQmE,OAAO,CAAEzC,eAAgB,CAAAwC,QAAA,CAAC,kBAAgB,CAAQ,CAAC,CAG1D,CAAAvD,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEyD,WAAW,CAAC,CAAC,IAAK/D,aAAa,CAAC+D,WAAW,CAAC,CAAC,eACzDlE,KAAA,QAAAgE,QAAA,eACIlE,IAAA,OAAAkE,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBlE,IAAA,UAAO+C,IAAI,CAAC,MAAM,CAACsB,KAAK,CAAE5D,aAAc,CAAC6D,QAAQ,CAAGC,CAAC,EAAK7D,gBAAgB,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAACI,WAAW,CAAC,gBAAgB,CAAE,CAAC,cAC3HzE,IAAA,WAAQmE,OAAO,CAAE,KAAAA,CAAA,GAAY,CACzB,GAAI,CACA,KAAM,CAAAtE,KAAK,CAAC4D,IAAI,CAAC,GAAGtD,UAAU,eAAe,CAAE,CAAEuC,IAAI,CAAEjC,aAAa,CAAEE,aAAc,CAAC,CAAC,CACtFwB,KAAK,CAAC,+BAA+B,CAAC,CACtCzB,gBAAgB,CAAC,EAAE,CAAC,CACpBgE,eAAe,CAAC,CAAC,CACrB,CAAE,MAAOlD,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACnD,CACJ,CAAE,CAAA0C,QAAA,CAAC,eAAa,CAAQ,CAAC,EACxB,CACR,cAGDhE,KAAA,QAAAgE,QAAA,eACIlE,IAAA,OAAAkE,QAAA,CAAI,oBAAkB,CAAI,CAAC,cAC3BlE,IAAA,WAAQmE,OAAO,CAAE/B,mBAAoB,CAAA8B,QAAA,CAAC,sBAAoB,CAAQ,CAAC,EAClE,CAAC,cAGNhE,KAAA,QAAAgE,QAAA,eACIlE,IAAA,OAAAkE,QAAA,CAAI,MAAI,CAAI,CAAC,cACblE,IAAA,UAAAkE,QAAA,CAAO,uBAAqB,CAAO,CAAC,cACpChE,KAAA,WAAQmE,KAAK,CAAEtD,UAAW,CAACuD,QAAQ,CAAGC,CAAC,EAAKvD,aAAa,CAACuD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAAH,QAAA,eACtElE,IAAA,WAAQqE,KAAK,CAAC,EAAE,CAAAH,QAAA,CAAC,QAAM,CAAQ,CAAC,cAChClE,IAAA,WAAQqE,KAAK,CAAC,aAAa,CAAAH,QAAA,CAAC,aAAW,CAAQ,CAAC,cAChDlE,IAAA,WAAQqE,KAAK,CAAC,UAAU,CAAAH,QAAA,CAAC,UAAQ,CAAQ,CAAC,EACtC,CAAC,cAGThE,KAAA,WAAQoE,QAAQ,CAAGC,CAAC,EAAKzD,oBAAoB,CAACyD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAAH,QAAA,eAC1ElE,IAAA,WAAQqE,KAAK,CAAC,EAAE,CAAAH,QAAA,CAAC,kBAAgB,CAAQ,CAAC,CACzC3D,UAAU,CAACoE,GAAG,CAAEC,SAAS,eACtB1E,KAAA,WAA4BmE,KAAK,CAAEO,SAAS,CAACC,GAAI,CAAAX,QAAA,EAC5CU,SAAS,CAAClC,IAAI,CAAC,YAAU,CAACkC,SAAS,CAACE,SAAS,GADrCF,SAAS,CAACC,GAEf,CACX,CAAC,EACE,CAAC,cACW7E,IAAA,MAAAkE,QAAA,CAAG,0BAAwB,CAAG,CAAC,cAInClE,IAAA,WAAQmE,OAAO,CAAEpD,UAAU,GAAK,aAAa,CAAG6C,mBAAmB,CAAGK,gBAAiB,CAACc,QAAQ,CAAE,CAAClE,iBAAiB,EAAI,CAACE,UAAW,CAAAmD,QAAA,CAAC,MAErI,CAAQ,CAAC,EACR,CAAC,EACL,CAAC,CAEd,CAEA,cAAe,CAAA5D,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}